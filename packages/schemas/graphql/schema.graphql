"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  me: User
  user(id: ID!): User
  task(id: ID!): Task
  tasks(after: String, first: Int, before: String, last: Int, search: String): TaskConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User Data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  name: String
  email: String
  active: Boolean
}

"""Task Data"""
type Task implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  title: String!
  description: String
  author: User
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type TaskConnection {
  """Number of items in this connection"""
  count: Int!

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int!

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [TaskEdge]!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge"""
  node: Task

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  UserRegisterWithEmail(input: UserRegisterWithEmailInput!): UserRegisterWithEmailPayload
  UserLoginWithEmail(input: UserLoginWithEmailInput!): UserLoginWithEmailPayload
  TaskAdd(input: TaskAddInput!): TaskAddPayload
  TaskUpdate(input: TaskUpdateInput!): TaskUpdatePayload
  TaskDelete(input: TaskDeleteInput!): TaskDeletePayload
}

type UserRegisterWithEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

input UserRegisterWithEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginWithEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

input UserLoginWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type TaskAddPayload {
  task: TaskEdge
  error: String
  clientMutationId: String
}

input TaskAddInput {
  title: String!
  description: String
  clientMutationId: String
}

type TaskUpdatePayload {
  task: TaskEdge
  error: String
  clientMutationId: String
}

input TaskUpdateInput {
  id: ID!
  title: String!
  description: String
  clientMutationId: String
}

type TaskDeletePayload {
  id: ID
  error: String
  clientMutationId: String
}

input TaskDeleteInput {
  id: ID!
  clientMutationId: String
}

type Subscription {
  TaskAdded: TaskAddedPayload
  TaskUpdated: TaskUpdatedPayload
  TaskDeleted: TaskDeletedPayload
}

type TaskAddedPayload {
  taskEdge: TaskEdge
}

type TaskUpdatedPayload {
  taskEdge: TaskEdge
}

type TaskDeletedPayload {
  id: ID
}
